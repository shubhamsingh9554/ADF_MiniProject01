{
	"name": "DL_MiniProject_Task1_Transformation",
	"properties": {
		"folder": {
			"name": "DL_MiniProject_Task1"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "AzureSqlTableLoadUsers",
						"type": "DatasetReference"
					},
					"name": "user"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlTableLoadAdmins",
						"type": "DatasetReference"
					},
					"name": "admins"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AzureSqlTablePrepUsers",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlTablePrepAdmins",
						"type": "DatasetReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "RemoveDuplicateRows1"
				},
				{
					"name": "RemoveDuplicaterows2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          name as string,",
				"          email as string,",
				"          password as string,",
				"          role as string,",
				"          department as string,",
				"          reportsTo as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> user",
				"source(output(",
				"          name as string,",
				"          email as string,",
				"          password as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> admins",
				"user aggregate(groupBy(email),",
				"     each(match(name!=\"email\"), $$ = first($$))) ~> RemoveDuplicateRows1",
				"admins aggregate(groupBy(email),",
				"     each(match(name!=\"email\"), $$ = first($$))) ~> RemoveDuplicaterows2",
				"RemoveDuplicateRows1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     recreate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink1",
				"RemoveDuplicaterows2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     recreate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink2"
			]
		}
	}
}